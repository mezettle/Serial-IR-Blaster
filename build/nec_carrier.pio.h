// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// nec_carrier //
// ----------- //

#define nec_carrier_wrap_target 0
#define nec_carrier_wrap 4

static const uint16_t nec_carrier_program_instructions[] = {
            //     .wrap_target
    0xe034, //  0: set    x, 20                      
    0x20c7, //  1: wait   1 irq, 7                   
    0xe101, //  2: set    pins, 1                [1] 
    0xe000, //  3: set    pins, 0                    
    0x0042, //  4: jmp    x--, 2                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program nec_carrier_program = {
    .instructions = nec_carrier_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config nec_carrier_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + nec_carrier_wrap_target, offset + nec_carrier_wrap);
    return c;
}

    static inline void nec_carrier_program_init(PIO pio, uint sm, uint offset, uint pin){
        //create state machine config
        pio_sm_config c = nec_carrier_program_get_default_config(offset);
        //map "pin" to set pins
        sm_config_set_set_pins(&c, pin, 1);
        //set gpio func
        pio_gpio_init(pio, pin);
        //set pin direction
        pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
        //set clock divider (to operate at 38khz using 125Mhz sys clock)
        sm_config_set_clkdiv(&c, 817.591962744);
        //apply config to state machine
        pio_sm_init(pio, sm, offset, &c);
        //enable state machine
        pio_sm_set_enabled(pio, sm, true);
    }

#endif

